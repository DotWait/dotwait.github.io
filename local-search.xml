<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DeepSeek三分钟本地部署（亲测有效）</title>
    <link href="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/"/>
    <url>/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="一、DeepSeek介绍"><a href="#一、DeepSeek介绍" class="headerlink" title="一、DeepSeek介绍"></a>一、DeepSeek介绍</h3><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/1.png" class=""><p>DeepSeek（深度求索）是一家专注于实现AGI（通用人工智能）的中国公司，致力于探索AGI技术的前沿，尤其在<strong>大模型研发</strong>领域表现突出。其技术覆盖自然语言处理、代码生成、数学推理等多个方向，并且部分模型已开源，受到开发者广泛关注。</p><h3 id="二、本地部署DeepSeek"><a href="#二、本地部署DeepSeek" class="headerlink" title="二、本地部署DeepSeek"></a>二、本地部署DeepSeek</h3><p>部署流程：</p><ol><li>安装Ollama</li><li>使用Ollama部署DeepSeek</li></ol><p>笔者部署环境：（仅供参考）</p><ul><li>操作系统：Windows10</li><li>Cpu：AMD R7 3700X</li><li>内存：16g</li><li>磁盘：1T</li></ul><p><strong>PS</strong>：不想去官网下载安装包，想直接获取本次部署教程所有资源的，在公众号“<strong>无理的PAI</strong>”后台回复“<strong>deepseek</strong>” 可直接获取！！</p><p>开始部署吧！</p><p><strong>（1）安装Ollama</strong></p><p>Ollama 官网：<a href="https://ollama.com/">https://ollama.com/</a></p><p>进入官网后点击Download进入下载页面，根据自己的操作系统选择对应的版本进行下载即可</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/2.PNG" class=""><p>安装完成后搜索一下Ollama就能找到这个应用，点击此应用就会运行</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/3.png" class=""><p>点击Ollama图标运行之后，会在电脑右小角的状态栏出现Ollama的小图标</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/4.PNG" class=""><p>测试一下Ollama安装是否成功，按下Win+r键，输入cmd，打开命令提示符（或者搜索命令提示符打开也行），在命令提示符终端中输入“<strong>ollama -v</strong>”，若返回ollama的八本号则表示安装成功。</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/5.PNG" class=""><p><strong>（2）使用Ollama部署DeepSeek</strong></p><p>Ollama 支持大模型列表：<a href="https://ollama.com/library">https://ollama.com/library</a></p><p>选择我们想要安装的deepseek-r1</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/6.PNG" class=""><p>点击进入后可以看到deepseek可选择的大模型版本</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/7.png" class=""><p>DeepSeek不同版本介绍：</p><table><thead><tr><th align="left"><strong>模型参数规模</strong></th><th align="left"><strong>典型用途</strong></th><th align="left"><strong>CPU 建议</strong></th><th align="left"><strong>GPU 建议</strong></th><th align="left"><strong>内存建议 (RAM)</strong></th><th align="left"><strong>磁盘空间建议</strong></th><th align="left"><strong>适用场景</strong></th></tr></thead><tbody><tr><td align="left"><strong>1.5b (15亿)</strong></td><td align="left">小型推理、轻量级任务</td><td align="left">4核以上 (Intel i5 &#x2F; AMD Ryzen 5)</td><td align="left">可选，入门级 GPU (如 NVIDIA GTX 1650, 4GB 显存)</td><td align="left">8GB</td><td align="left">10GB 以上 SSD</td><td align="left">小型 NLP 任务、文本生成、简单分类</td></tr><tr><td align="left"><strong>7b (70亿)</strong></td><td align="left">中等推理、通用任务</td><td align="left">6核以上 (Intel i7 &#x2F; AMD Ryzen 7)</td><td align="left">中端 GPU (如 NVIDIA RTX 3060, 12GB 显存)</td><td align="left">16GB</td><td align="left">20GB 以上 SSD</td><td align="left">中等规模 NLP、对话系统、文本分析</td></tr><tr><td align="left"><strong>14b (140亿)</strong></td><td align="left">中大型推理、复杂任务</td><td align="left">8核以上 (Intel i9 &#x2F; AMD Ryzen 9)</td><td align="left">高端 GPU (如 NVIDIA RTX 3090, 24GB 显存)</td><td align="left">32GB</td><td align="left">50GB 以上 SSD</td><td align="left">复杂 NLP、多轮对话、知识问答</td></tr><tr><td align="left"><strong>32b (320亿)</strong></td><td align="left">大型推理、高性能任务</td><td align="left">12核以上 (Intel Xeon &#x2F; AMD Threadripper)</td><td align="left">高性能 GPU (如 NVIDIA A100, 40GB 显存)</td><td align="left">64GB</td><td align="left">100GB 以上 SSD</td><td align="left">大规模 NLP、多模态任务、研究用途</td></tr><tr><td align="left"><strong>70b (700亿)</strong></td><td align="left">超大规模推理、研究任务</td><td align="left">16核以上 (服务器级 CPU)</td><td align="left">多 GPU 并行 (如 2x NVIDIA A100, 80GB 显存)</td><td align="left">128GB</td><td align="left">200GB 以上 SSD</td><td align="left">超大规模模型、研究、企业级应用</td></tr><tr><td align="left"><strong>671b (6710亿)</strong></td><td align="left">超大规模训练、企业级任务</td><td align="left">服务器级 CPU (如 AMD EPYC &#x2F; Intel Xeon)</td><td align="left">多 GPU 集群 (如 8x NVIDIA A100, 320GB 显存)</td><td align="left">256GB 或更高</td><td align="left">1TB 以上 NVMe SSD</td><td align="left">超大规模训练、企业级 AI 平台</td></tr></tbody></table><p>根据自己的电脑配置条件，选择不同的版本进行安装即可，打开CMD命令提示符窗口，根据版本输入对应的运行指令：</p><ul><li>若选择 1.5B 版本，输入 ollama run deepseek-r1:1.5b （我 选择的是这个，仅作参考）</li><li>若选择 7B 版本，输入 ollama run deepseek-r1:7b </li><li>若选择 8B 版本，输入 ollama run deepseek-r1:8b </li><li>若选择 32B 版本，输入 ollama run deepseek-r1:32b</li></ul><p>例如，安装并运行DeepSeek 的1.5b版本：</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/8.PNG" class=""><p>这样就部署完成了啦！直接在命令行中输入就可以使用DeepSeek啦</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/9.PNG" class=""><p>如果仅仅是测试体验DeepSeek的话，到上面第二步就结束啦。如果想经常使用，并且觉得命令窗口的形式过于丑陋的，请看第三步</p><h3 id="三、使用客户端连接使用DeepSeek（提升使用体验专用）"><a href="#三、使用客户端连接使用DeepSeek（提升使用体验专用）" class="headerlink" title="三、使用客户端连接使用DeepSeek（提升使用体验专用）"></a>三、使用客户端连接使用DeepSeek（提升使用体验专用）</h3><p>市面上有很多工具可以对接各种大模型（其中包括DeepSeek），这里选用了 ChatBox 来与我们本地的DeepSeek进行交互，它支持跨平台，使用较为方便。</p><p>ChatBox 官网地址：<a href="https://chatboxai.app/zh">https://chatboxai.app/zh</a></p><p>进入官网，下载对应的安装包，进行安装：</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/10.PNG" class=""><p>开始安装chatbox，按默认仅为我安装即可</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/11.PNG" class=""><p>这边个人喜欢更改安装位置，按自己喜好选择即可</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/12.PNG" class=""><p>安装完成后直接运行即可</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/13.PNG" class=""><p>运行后开始配置chatbox，按照如下步骤配置即可</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/14.PNG" class=""><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/15.PNG" class=""><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/16.PNG" class=""><p>点击保存后就可以直接使用啦！输入“你是谁”，测试一下吧</p><img src="/2025/02/09/DeepSeek%E4%B8%89%E5%88%86%E9%92%9F%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/17.PNG" class=""><p>好了，到这里就可以愉快的使用DeepSeek啦~</p><p>希望这篇文章能帮到你，也希望DeepSeek能为独立开发者开启新的一扇窗~</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于使用Uniapp开发了一款刷题软件的记录</title>
    <link href="/2024/10/15/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Uniapp%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E6%AC%BE%E5%88%B7%E9%A2%98%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/10/15/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Uniapp%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E6%AC%BE%E5%88%B7%E9%A2%98%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>此文章是本人第一次学习使用Uniapp开发软件的记录，此次开发的软件是一款刷题软件，主要的功能如下：</p><ul><li>支持题库的增删改查，以及题目的导入</li><li>支持单选、多选、判断、填空等题型</li><li>支持试卷配置以及考试</li><li>记录每次刷题的结果，形成刷题分析</li><li>支持题库的分享以及隐私性</li></ul><p>…因个人精力有限，只开发这些主要功能啦~</p><p>学习使用Uniapp的缘故是看到可以发布到多个平台，试着看看可行性如何，这款软件只能利用业余时间开发，耗时较长，不过也算是功夫不负有心人，核心功能算是基本完成，也发布到了微信小程序。效果图呈上：</p><img src="/2024/10/15/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Uniapp%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E6%AC%BE%E5%88%B7%E9%A2%98%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%AE%B0%E5%BD%95/1.jpg" class="" width="280" height="600">  <img src="/2024/10/15/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Uniapp%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E6%AC%BE%E5%88%B7%E9%A2%98%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%AE%B0%E5%BD%95/2.jpg" class="" width="280" height="600">  <img src="/2024/10/15/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Uniapp%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E6%AC%BE%E5%88%B7%E9%A2%98%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%AE%B0%E5%BD%95/3.jpg" class="" width="280" height="600"><img src="/2024/10/15/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Uniapp%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E6%AC%BE%E5%88%B7%E9%A2%98%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%AE%B0%E5%BD%95/4.jpg" class="" width="280" height="600">  <img src="/2024/10/15/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Uniapp%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E6%AC%BE%E5%88%B7%E9%A2%98%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%AE%B0%E5%BD%95/5.jpg" class="" width="280" height="600">  <img src="/2024/10/15/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Uniapp%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E6%AC%BE%E5%88%B7%E9%A2%98%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%AE%B0%E5%BD%95/6.jpg" class="" width="280" height="600"><img src="/2024/10/15/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Uniapp%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E6%AC%BE%E5%88%B7%E9%A2%98%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%AE%B0%E5%BD%95/7.jpg" class="" width="280" height="600">  <img src="/2024/10/15/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Uniapp%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E6%AC%BE%E5%88%B7%E9%A2%98%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%AE%B0%E5%BD%95/8.jpg" class="" width="280" height="600">  <h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><p>此刷题小程序暂时只作为学习项目使用，如需体验可以在微信搜索：<strong>懒虫刷题帮</strong></p><p>其他有需要可加v：zhiniao567</p>]]></content>
    
    
    
    <tags>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2D骨骼动画软件Spine破解版</title>
    <link href="/2024/08/18/2D%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB%E8%BD%AF%E4%BB%B6Spine%E7%A0%B4%E8%A7%A3%E7%89%88/"/>
    <url>/2024/08/18/2D%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB%E8%BD%AF%E4%BB%B6Spine%E7%A0%B4%E8%A7%A3%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在了解了游戏素材制作的不易后，发现骨骼动画相对更加友好，能大大减少动画制作的时间，还能降低性能的损耗。<a href="#https://zh.esotericsoftware.com/">Spine官网</a> 这是一款优秀的付费软件，买断制，还有一款国产的DragonBones（可惜好像停止维护了，本来还想支持下国产，毕竟免费）。因此只能选择Spine，幸好找到了破解版，等游戏完成必会购买正版！</p><p>破解版的Spine软件版本是：3.8.75</p><p>有需要的请取走~</p><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><p>百度网盘资源：<a href="https://pan.baidu.com/s/1HWpmW1igrI2GR8LkgSJv0Q">https://pan.baidu.com/s/1HWpmW1igrI2GR8LkgSJv0Q</a><br>提取码：81ri</p><h2 id="素材下载"><a href="#素材下载" class="headerlink" title="素材下载"></a>素材下载</h2><p>刚入门学习很需要一些简单的素材用于练习，顺便将我收集到的一些素材也分享一下吧（请随意取走~）</p><p>通过百度网盘分享的文件：大乱斗spine.zip<br>链接：<a href="https://pan.baidu.com/s/15Wm7BNVNSqHwy3bMKdH6Ug">https://pan.baidu.com/s/15Wm7BNVNSqHwy3bMKdH6Ug</a><br>提取码：eyn0</p>]]></content>
    
    
    
    <tags>
      
      <tag>spine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cocos Creator3.x学习制作FlappyBird小游戏</title>
    <link href="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <url>/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>此文章是本人第一次学习CocosCreator所记录的心得体会，写下此文章的目的有两个：</p><ol><li>增强学习过程的记忆</li><li>记录一下关键点，供后续查阅，也想和刚学习的小伙伴一起研究探讨</li></ol><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li>游戏开发工具：Cocos Creator 3.8.3</li><li>脚本代码编辑工具：VSCode</li><li>练习用的游戏资源下载：链接：<a href="https://pan.baidu.com/s/1_OaseAbmoHbKiRbxBWfD6g">https://pan.baidu.com/s/1_OaseAbmoHbKiRbxBWfD6g</a>  提取码：l2sa</li><li>完整代码见文章底部</li></ul><h2 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h2><h3 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h3><h4 id="1、使用CocosCreator创建一个Empty2D项目"><a href="#1、使用CocosCreator创建一个Empty2D项目" class="headerlink" title="1、使用CocosCreator创建一个Empty2D项目"></a>1、使用CocosCreator创建一个Empty2D项目</h4><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/11.PNG" class=""><h4 id="2、在assets文件夹下创建文件夹"><a href="#2、在assets文件夹下创建文件夹" class="headerlink" title="2、在assets文件夹下创建文件夹"></a>2、在assets文件夹下创建文件夹</h4><ul><li>scene：场景存放</li><li>animation：动画存放</li><li>images：图片资源存放</li><li>prefab：预制体存放</li><li>scripts：脚本代码存放</li></ul><p>文件夹创建完成后按下Ctrl+s进行保存，保存在assets&#x2F;scene文件夹下，文件取名为game（可根据实际随意）</p><h4 id="3、导入图片资源"><a href="#3、导入图片资源" class="headerlink" title="3、导入图片资源"></a>3、导入图片资源</h4><p>将上述网盘中的图片资源导入，在assets&#x2F;images上右键导入新文件，选中后缀为png的图片导入即可</p><p>结果图：</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/12.PNG" class=""><h3 id="二、小鸟"><a href="#二、小鸟" class="headerlink" title="二、小鸟"></a>二、小鸟</h3><h4 id="1、在Canvas下创建Sprite节点，重命名为Bird，用作小鸟节点"><a href="#1、在Canvas下创建Sprite节点，重命名为Bird，用作小鸟节点" class="headerlink" title="1、在Canvas下创建Sprite节点，重命名为Bird，用作小鸟节点"></a>1、在Canvas下创建Sprite节点，重命名为Bird，用作小鸟节点</h4><p>（刚开始学习有点疑惑，什么时候用空节点，什么时候用Sprite，后来在文档中看到了组件的概念，发现两者的区别仅仅是：Sprite节点在空节点上自动添加了Sprite组件而已）。</p><p>将assets&#x2F;images下的bird1图片拖动到Bird节点的SpriteFrame上，就会展示小鸟的样子了。</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/3.PNG" class=""><h4 id="2、接下来让小鸟动起来"><a href="#2、接下来让小鸟动起来" class="headerlink" title="2、接下来让小鸟动起来"></a>2、接下来让小鸟动起来</h4><p>在assets&#x2F;animation文件夹下创建动画剪辑（Animation Clip），重命名为birdAnimation，将birdAnimation拖到Bird节点的属性检查器面板，会自动添加上Animation组件</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/4.PNG" class=""><h4 id="3、动画编辑"><a href="#3、动画编辑" class="headerlink" title="3、动画编辑"></a>3、动画编辑</h4><p>选中Bird，进入动画编辑器</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/5.PNG" class=""><p>在属性列表添加SpriteFrame，选中assets&#x2F;images下的bird1、bird2、bird3三张图片，一起拖动到动画编辑器的关键帧上。</p><p>分别调整三个小鸟到0、10、20位置（数字表示时间间隔），在第30的位置复制第一张bird1图片（小鸟飞是一个循环动画的过程，形成闭环后动画更加自然）</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/6.PNG" class=""><p>最后勾上加载后播放，循环模式选择循环播放，保存动画，保存场景后预览，小鸟就会一直飞</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/7.PNG" class=""><h3 id="三、背景图"><a href="#三、背景图" class="headerlink" title="三、背景图"></a>三、背景图</h3><h4 id="1、设计尺寸"><a href="#1、设计尺寸" class="headerlink" title="1、设计尺寸"></a>1、设计尺寸</h4><p>在项目设置中修改设计尺寸，设计宽度288，设计高度512（也可自行设定其他尺寸），目前对于设计尺寸的认知是游戏制作时设定一个分辨率用于各种资源的布局，后续发布时会以设计尺寸去适配各种不同的屏幕尺寸。</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/8.PNG" class=""><h4 id="2、背景图创建"><a href="#2、背景图创建" class="headerlink" title="2、背景图创建"></a>2、背景图创建</h4><p>在Canvas下创建一个Sprite节点，重命名为Bg，拖动assets&#x2F;images下的background图片至Bg节点的SpriteFrame，</p><p>并调整ContentSize为288，512，Position为0，0（此时小鸟看不见了，因为渲染的顺序时自上而下，所以拖动调整Bg节点至Bird节点上方，先渲染背景图，再渲染小鸟）</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/9.PNG" class=""><h4 id="3、小鸟前进？背景图后退"><a href="#3、小鸟前进？背景图后退" class="headerlink" title="3、小鸟前进？背景图后退"></a>3、小鸟前进？背景图后退</h4><p>在assets&#x2F;scripts下创建一个MainController.ts脚本，并将MainController添加到Canvas上，思路：背景图创建两个一摸一样的节点，区别是一个x坐标为0，另一个为288。</p><p>将两个背景节点赋值给脚本，在脚本的update中每次x坐标都减少1个像素，形成向左移动的效果，当左边背景图移出画面（x坐标&lt;&#x3D;-288）时马上从左边移动到最右边（x坐标变成288），以此往复循环</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; _decorator, <span class="hljs-title class_">BoxCollider2D</span>, <span class="hljs-title class_">Button</span>, <span class="hljs-title class_">Collider2D</span>, <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">Director</span>, director, <span class="hljs-title class_">EventTouch</span>, instantiate, <span class="hljs-title class_">Label</span>, log, <span class="hljs-title class_">Node</span>, <span class="hljs-title class_">Prefab</span>, <span class="hljs-title class_">Quat</span>, <span class="hljs-title class_">Sprite</span>, <span class="hljs-title class_">Vec3</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cc&#x27;</span>;<br><span class="hljs-keyword">const</span> &#123; ccclass, property &#125; = _decorator;<br><br><span class="hljs-meta">@ccclass</span>(<span class="hljs-string">&#x27;MainController&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-meta">@property</span>(<span class="hljs-title class_">Label</span>)<br>    <span class="hljs-attr">label</span>: <span class="hljs-title class_">Label</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-meta">@property</span>(<span class="hljs-title class_">Sprite</span>)<br>    <span class="hljs-title class_">SpBg</span>: <span class="hljs-title class_">Sprite</span>[] = [<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>];<br><br>    <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>    &#125;<br><br>    <span class="hljs-title function_">update</span>(<span class="hljs-params">deltaTime: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">SpBg</span>[i].<span class="hljs-property">node</span>.<span class="hljs-title function_">getPosition</span>();<br>            pos.<span class="hljs-property">x</span> -= <span class="hljs-number">1.0</span>;<br>            <span class="hljs-keyword">if</span> (pos.<span class="hljs-property">x</span> &lt;= -<span class="hljs-number">288</span>) &#123;<br>                pos.<span class="hljs-property">x</span> = <span class="hljs-number">288</span>;<br>            &#125;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">SpBg</span>[i].<span class="hljs-property">node</span>.<span class="hljs-title function_">setPosition</span>(pos)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/10.PNG" class=""><h3 id="四、水管障碍物"><a href="#四、水管障碍物" class="headerlink" title="四、水管障碍物"></a>四、水管障碍物</h3><h4 id="1、水管图创建"><a href="#1、水管图创建" class="headerlink" title="1、水管图创建"></a>1、水管图创建</h4><p>在Canvas下创建一个空节点，命名为Pipe，用来存放上水管和下水管。在Pipe节点下创建两个Sprite节点，分别命名为PipeUp和PipeDown。将assets&#x2F;images下的pipe图片与之前一样，拖动到两个Sprite节点的SpriteFrame上。调整ContentSize属性至水管大小合适，调整position至位置合适即可。</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/13.PNG" class=""><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/14.PNG" class=""><h4 id="2、制作水管预制体"><a href="#2、制作水管预制体" class="headerlink" title="2、制作水管预制体"></a>2、制作水管预制体</h4><p>游戏运行时，水管会以不同的高度持续出现，预制体有点像代码里的Class类（目前的理解），后续可以在脚本中对预制体进行实例化，从而创建多个水管。直接将Canvas下的Pipe节点拖动到assets&#x2F;prefab下即可制作预制体，制作成功后删除Canvas下的Pipe节点。</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/15.PNG" class=""><p>这里为了控制Pipe的层级，在Canvas下新建一个空节点，命名为Pipe，并移动至Bird节点上层</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/16.PNG" class=""><h4 id="3、生成水管"><a href="#3、生成水管" class="headerlink" title="3、生成水管"></a>3、生成水管</h4><p>在MainController.ts脚本的start方法中初始化游戏开始时的水管。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i] = <span class="hljs-title function_">instantiate</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">pipePrefab</span>) <span class="hljs-comment">// 实例化水管预制体</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">getChildByName</span>(<span class="hljs-string">&quot;Pipe&quot;</span>).<span class="hljs-title function_">addChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i]) <span class="hljs-comment">// 找到Pipe节点，在Pipe节点下生成水管，便于控制层级</span><br><br>        <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">getPosition</span>()<br>        pos.<span class="hljs-property">x</span> = <span class="hljs-number">170</span> + <span class="hljs-number">200</span>*i <span class="hljs-comment">// x坐标为水管间隔距离</span><br>        <span class="hljs-keyword">var</span> minY = -<span class="hljs-number">170</span><br>        <span class="hljs-keyword">var</span> maxY = <span class="hljs-number">170</span><br>        pos.<span class="hljs-property">y</span> = minY + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(maxY-minY) <span class="hljs-comment">// 水管上下高度随机在范围内变化</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">setPosition</span>(pos) <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在update方法中处理水管向后移动（与背景图处理类似），并随机生成后续水管。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">update</span>(<span class="hljs-params">deltaTime: <span class="hljs-built_in">number</span></span>) &#123;<br>    <span class="hljs-comment">// 背景图向后移动处理</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">SpBg</span>[i].<span class="hljs-property">node</span>.<span class="hljs-title function_">getPosition</span>();<br>        pos.<span class="hljs-property">x</span> -= <span class="hljs-number">1.0</span>;<br>        <span class="hljs-keyword">if</span> (pos.<span class="hljs-property">x</span> &lt;= -<span class="hljs-number">288</span>) &#123;<br>            pos.<span class="hljs-property">x</span> = <span class="hljs-number">288</span>;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">SpBg</span>[i].<span class="hljs-property">node</span>.<span class="hljs-title function_">setPosition</span>(pos)<br>    &#125;<br>    <span class="hljs-comment">// 水管向后移动并生成新水管</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>        <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">getPosition</span>()<br>        pos.<span class="hljs-property">x</span> -= <span class="hljs-number">1.0</span> <span class="hljs-comment">// 向后移动处理</span><br>        <span class="hljs-keyword">if</span>(pos.<span class="hljs-property">x</span> &lt;= -<span class="hljs-number">170</span>)&#123; <span class="hljs-comment">// 移出画面后变为新的水管</span><br>            pos.<span class="hljs-property">x</span> = <span class="hljs-number">430</span><br>            <span class="hljs-keyword">var</span> minY = -<span class="hljs-number">170</span><br>            <span class="hljs-keyword">var</span> maxY = <span class="hljs-number">170</span><br>            pos.<span class="hljs-property">y</span> = minY + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(maxY - minY)<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">setPosition</span>(pos)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MainController完整代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; _decorator, <span class="hljs-title class_">BoxCollider2D</span>, <span class="hljs-title class_">Button</span>, <span class="hljs-title class_">Collider2D</span>, <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">Director</span>, director, <span class="hljs-title class_">EventTouch</span>, instantiate, <span class="hljs-title class_">Label</span>, log, <span class="hljs-title class_">Node</span>, <span class="hljs-title class_">Prefab</span>, <span class="hljs-title class_">Quat</span>, <span class="hljs-title class_">Sprite</span>, <span class="hljs-title class_">Vec3</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cc&#x27;</span>;<br><span class="hljs-keyword">const</span> &#123; ccclass, property &#125; = _decorator;<br><br><span class="hljs-meta">@ccclass</span>(<span class="hljs-string">&#x27;MainController&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>    <span class="hljs-meta">@property</span>(<span class="hljs-title class_">Sprite</span>)<br>    <span class="hljs-title class_">SpBg</span>: <span class="hljs-title class_">Sprite</span>[] = [<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>];<br><br>    <span class="hljs-meta">@property</span>(<span class="hljs-title class_">Prefab</span>)<br>    <span class="hljs-attr">pipePrefab</span>: <span class="hljs-title class_">Prefab</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-attr">pipe</span>: <span class="hljs-title class_">Node</span>[] = [<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>];<br><br>    <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i] = <span class="hljs-title function_">instantiate</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">pipePrefab</span>) <span class="hljs-comment">// 实例化水管预制体</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">getChildByName</span>(<span class="hljs-string">&quot;Pipe&quot;</span>).<span class="hljs-title function_">addChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i]) <span class="hljs-comment">// 找到Pipe节点，在Pipe节点下生成水管，便于控制层级</span><br><br>            <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">getPosition</span>()<br>            pos.<span class="hljs-property">x</span> = <span class="hljs-number">170</span> + <span class="hljs-number">200</span>*i <span class="hljs-comment">// x坐标为水管间隔距离</span><br>            <span class="hljs-keyword">var</span> minY = -<span class="hljs-number">170</span><br>            <span class="hljs-keyword">var</span> maxY = <span class="hljs-number">170</span><br>            pos.<span class="hljs-property">y</span> = minY + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(maxY-minY) <span class="hljs-comment">// 水管上下高度随机在范围内变化</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">setPosition</span>(pos) <br>        &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">update</span>(<span class="hljs-params">deltaTime: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-comment">// 背景图向后移动处理</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">SpBg</span>[i].<span class="hljs-property">node</span>.<span class="hljs-title function_">getPosition</span>();<br>            pos.<span class="hljs-property">x</span> -= <span class="hljs-number">1.0</span>;<br>            <span class="hljs-keyword">if</span> (pos.<span class="hljs-property">x</span> &lt;= -<span class="hljs-number">288</span>) &#123;<br>                pos.<span class="hljs-property">x</span> = <span class="hljs-number">288</span>;<br>            &#125;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">SpBg</span>[i].<span class="hljs-property">node</span>.<span class="hljs-title function_">setPosition</span>(pos)<br>        &#125;<br>        <span class="hljs-comment">// 水管向后移动并生成新水管</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>            <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">getPosition</span>()<br>            pos.<span class="hljs-property">x</span> -= <span class="hljs-number">1.0</span> <span class="hljs-comment">// 向后移动处理</span><br>            <span class="hljs-keyword">if</span>(pos.<span class="hljs-property">x</span> &lt;= -<span class="hljs-number">170</span>)&#123; <span class="hljs-comment">// 移出画面后变为新的水管</span><br>                pos.<span class="hljs-property">x</span> = <span class="hljs-number">430</span><br>                <span class="hljs-keyword">var</span> minY = -<span class="hljs-number">170</span><br>                <span class="hljs-keyword">var</span> maxY = <span class="hljs-number">170</span><br>                pos.<span class="hljs-property">y</span> = minY + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(maxY - minY)<br>            &#125;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">setPosition</span>(pos)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将assets&#x2F;prefab下的pipe预制体拖至脚本上即可预览效果。</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/17.PNG" class=""><h3 id="五、小鸟操作"><a href="#五、小鸟操作" class="headerlink" title="五、小鸟操作"></a>五、小鸟操作</h3><h4 id="1、小鸟上升与下坠"><a href="#1、小鸟上升与下坠" class="headerlink" title="1、小鸟上升与下坠"></a>1、小鸟上升与下坠</h4><p>在不点击的情况下，小鸟一直下坠，点击屏幕时，小鸟向上飞翔一段时间。在assets&#x2F;scripts下新疆BirdController.ts脚本，增加如下代码（用来控制小鸟的上升与下坠）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; _decorator, <span class="hljs-title class_">BoxCollider2D</span>, <span class="hljs-title class_">Collider2D</span>, <span class="hljs-title class_">IPhysics2DContact</span>, <span class="hljs-title class_">Canvas</span>, <span class="hljs-title class_">Collider</span>, <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">EventTouch</span>, log, <span class="hljs-title class_">Node</span>, <span class="hljs-title class_">Quat</span>, <span class="hljs-title class_">Contact2DType</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cc&#x27;</span>;<br><span class="hljs-keyword">const</span> &#123; ccclass, property &#125; = _decorator;<br><br><span class="hljs-meta">@ccclass</span>(<span class="hljs-string">&#x27;BirdController&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BirdController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-meta">@property</span>(<span class="hljs-title class_">Canvas</span>)<br>    <span class="hljs-title class_">Canvas</span>: <span class="hljs-title class_">Canvas</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-attr">speed</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">onLoad</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-comment">// 监听屏幕点击事件</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">Canvas</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(<span class="hljs-title class_">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_START</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">onTouchStart</span>, <span class="hljs-variable language_">this</span>);<br>    &#125;<br><br>    <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>    &#125;<br><br>    <span class="hljs-title function_">update</span>(<span class="hljs-params">deltaTime: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> -= <span class="hljs-number">0.05</span>; <span class="hljs-comment">// 每次速度减少</span><br>        <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">getPosition</span>();<br>        pos.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>; <span class="hljs-comment">// 效果是每次加速一点点往下冲</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">setPosition</span>(pos);<br>        <span class="hljs-comment">// 小鸟头朝向的角度处理</span><br>        <span class="hljs-keyword">var</span> angle = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> / <span class="hljs-number">2</span>) * <span class="hljs-number">30</span> <br>        <span class="hljs-keyword">if</span> (angle &gt;= <span class="hljs-number">30</span>) &#123;<br>            angle = <span class="hljs-number">30</span>;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">setRotation</span>(<span class="hljs-title class_">Quat</span>.<span class="hljs-title function_">fromEuler</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Quat</span>(), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, angle));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 点击屏幕时触发</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">onTouchStart</span>(<span class="hljs-params">event: EventTouch</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-number">2</span>; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将BirdController.ts脚本拖动到Bird节点上，并将Canvas节点作为参数拖动到Bird上。</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/18.PNG" class=""><h3 id="六、小鸟碰撞水管"><a href="#六、小鸟碰撞水管" class="headerlink" title="六、小鸟碰撞水管"></a>六、小鸟碰撞水管</h3><h4 id="1、碰撞回调"><a href="#1、碰撞回调" class="headerlink" title="1、碰撞回调"></a>1、碰撞回调</h4><p>首次做碰撞回调，查阅了官方文档：<a href="https://docs.cocos.com/creator/3.8/manual/zh/physics-2d/physics-2d-contact-callback.html">Cocos3.8官方文档</a>，<strong>Box2D</strong> 物理模块需要先在**RigidBody2D中 **开启碰撞监听，才会有相应的回调产生。开启方法为，在 <strong>Rigidbody2D</strong> 的 <strong>属性检查器</strong> 勾选 <strong>EnabledContactListener</strong> 属性，这里需要监听碰撞回调，是为了后续处理小鸟装上水管的游戏结束处理。</p><p>在Bird节点添加组件RigidBody2D和BoxCollider2D。勾选RigidBody2D的<strong>EnabledContactListener</strong>属性，开启碰撞回调监听，设置RigidBody2D的<strong>GravityScale</strong>属性值为0，关闭重力值。</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/19.PNG" class=""><p>编辑assets&#x2F;prefab下的Pipe预制体，给PipeUp和PipeDown两个节点添加组件RigidBody2D和BoxCollider2D。分别设置RigidBody2D的<strong>GravityScale</strong>属性值为0，关闭重力值。（！记得预制体修改完一定要点击保存）</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/20.PNG" class=""><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/21.PNG" class=""><h4 id="2、碰撞代码处理"><a href="#2、碰撞代码处理" class="headerlink" title="2、碰撞代码处理"></a>2、碰撞代码处理</h4><p>小鸟碰撞水管后即为游戏结束，这里涉及了游戏状态，在MainController.ts中增加游戏状态枚举：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">GameStatus</span>&#123;<br>    <span class="hljs-title class_">Game</span>_Ready = <span class="hljs-number">0</span>, <span class="hljs-comment">// 游戏准备</span><br>    <span class="hljs-title class_">Game</span>_Playing, <span class="hljs-comment">// 游戏进行中</span><br>    <span class="hljs-title class_">Game</span>_Over, <span class="hljs-comment">// 游戏结束</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在MainController.ts中增加一个游戏结束的处理函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">gameOver</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">gameStatus</span> = <span class="hljs-title class_">GameStatus</span>.<span class="hljs-property">Game_Over</span><br>    <span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;游戏结束&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在BirdController.ts中监听碰撞回调，并在碰撞回调中调用MainController.ts中的gameOver()函数处理游戏结束：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; _decorator, <span class="hljs-title class_">BoxCollider2D</span>, <span class="hljs-title class_">Collider2D</span>, <span class="hljs-title class_">IPhysics2DContact</span>, <span class="hljs-title class_">Canvas</span>, <span class="hljs-title class_">Collider</span>, <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">EventTouch</span>, log, <span class="hljs-title class_">Node</span>, <span class="hljs-title class_">Quat</span>, <span class="hljs-title class_">Contact2DType</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cc&#x27;</span>;<br><span class="hljs-keyword">const</span> &#123; ccclass, property &#125; = _decorator;<br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MainController</span>,<span class="hljs-title class_">GameStatus</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./MainController&#x27;</span>;<br><br><span class="hljs-meta">@ccclass</span>(<span class="hljs-string">&#x27;BirdController&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BirdController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-meta">@property</span>(<span class="hljs-title class_">Canvas</span>)<br>    <span class="hljs-title class_">Canvas</span>: <span class="hljs-title class_">Canvas</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-attr">speed</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-attr">mainController</span>: <span class="hljs-title class_">MainController</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">onLoad</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-comment">// 监听屏幕点击事件</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">Canvas</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(<span class="hljs-title class_">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_START</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">onTouchStart</span>, <span class="hljs-variable language_">this</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mainController</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">Canvas</span>.<span class="hljs-title function_">getComponent</span>(<span class="hljs-title class_">MainController</span>) <br>    &#125;<br><br>    <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> collider = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getComponent</span>(<span class="hljs-title class_">BoxCollider2D</span>)<br>        <span class="hljs-keyword">if</span> (collider) &#123;<br>            collider.<span class="hljs-title function_">on</span>(<span class="hljs-title class_">Contact2DType</span>.<span class="hljs-property">BEGIN_CONTACT</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">onBeginContact</span>, <span class="hljs-variable language_">this</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">update</span>(<span class="hljs-params">deltaTime: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> -= <span class="hljs-number">0.05</span>; <span class="hljs-comment">// 每次速度减少</span><br>        <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">getPosition</span>();<br>        pos.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>; <span class="hljs-comment">// 效果是每次加速一点点往下冲</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">setPosition</span>(pos);<br>        <span class="hljs-comment">// 小鸟头朝向的角度处理</span><br>        <span class="hljs-keyword">var</span> angle = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> / <span class="hljs-number">2</span>) * <span class="hljs-number">30</span> <br>        <span class="hljs-keyword">if</span> (angle &gt;= <span class="hljs-number">30</span>) &#123;<br>            angle = <span class="hljs-number">30</span>;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">setRotation</span>(<span class="hljs-title class_">Quat</span>.<span class="hljs-title function_">fromEuler</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Quat</span>(), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, angle));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 点击屏幕时触发</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">onTouchStart</span>(<span class="hljs-params">event: EventTouch</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-number">2</span>; <br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 只在两个碰撞体开始接触时被调用一次</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> selfCollider 指的是回调脚本的节点上的碰撞体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> otherCollider 指的是发生碰撞的另一个碰撞体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> contact 碰撞主要的信息, 位置和法向量, 带有刚体的本地坐标来， </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">onBeginContact</span>(<span class="hljs-params">selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | <span class="hljs-literal">null</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mainController</span>.<span class="hljs-title function_">gameOver</span>() <span class="hljs-comment">// 调用游戏结束函数</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-number">0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>保存后预览，F12打开控制台，小鸟碰撞水管后控制台打印出“游戏结束”。</p><h3 id="七、开始和结束界面"><a href="#七、开始和结束界面" class="headerlink" title="七、开始和结束界面"></a>七、开始和结束界面</h3><h4 id="1、开始界面设计"><a href="#1、开始界面设计" class="headerlink" title="1、开始界面设计"></a>1、开始界面设计</h4><p>在Canvas下创建一个Spirte节点，命名为GameStart，将assets&#x2F;images下的logo图片拖动到GameStart节点的SpirteFrame属性上，游戏开始就以点击这个logo吧（这里也可以自行放置其他图片或者开始文字按钮之类），适当调整logo位置和大小</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/22.PNG" class=""><h4 id="2、结束界面设计"><a href="#2、结束界面设计" class="headerlink" title="2、结束界面设计"></a>2、结束界面设计</h4><p>在Canvas下创建一个Spirte节点，命名为GameOver，将assets&#x2F;images下的restart图片拖动到GameOver节点的SpirteFrame属性上，游戏结束时展示这个Restart图片，点击后重新开始游戏，适当调整logo位置和大小</p><p>PS：这里为了更好的操作GameOver节点，可以将GameStart节点禁用（不渲染），点击GameStart节点属性左上角的框框</p><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/23.PNG" class=""><img src="/2024/07/08/Cocos-Creator3-x%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9CFlappyBird%E5%B0%8F%E6%B8%B8%E6%88%8F/24.PNG" class=""><p>完成后将GameStart恢复渲染，将GameOver节点禁用。</p><h4 id="3、脚本处理"><a href="#3、脚本处理" class="headerlink" title="3、脚本处理"></a>3、脚本处理</h4><p>在MainController.ts脚本中开启GameStart和GameOver节点的点击监听事件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-attr">spGameOver</span>: <span class="hljs-title class_">Sprite</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-attr">spGameStart</span>: <span class="hljs-title class_">Sprite</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-title function_">onLoad</span>(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-comment">// 开启点击监听</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameOver</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">getChildByName</span>(<span class="hljs-string">&quot;GameOver&quot;</span>).<span class="hljs-title function_">getComponent</span>(<span class="hljs-title class_">Sprite</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameOver</span>.<span class="hljs-property">node</span>.<span class="hljs-property">active</span> = <span class="hljs-literal">false</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameStart</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">getChildByName</span>(<span class="hljs-string">&quot;GameStart&quot;</span>).<span class="hljs-title function_">getComponent</span>(<span class="hljs-title class_">Sprite</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameStart</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(<span class="hljs-title class_">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_END</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">touchStartBtn</span>, <span class="hljs-variable language_">this</span>)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameOver</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(<span class="hljs-title class_">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_END</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">touchStartBtn</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// 重新开始游戏可以调用不同的方法，这里暂时就调用开始游戏一样的方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>增加游戏开始点击事件处理：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">touchStartBtn</span>(<span class="hljs-params">event: EventTouch</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameStart</span>.<span class="hljs-property">node</span>.<span class="hljs-property">active</span> = <span class="hljs-literal">false</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">gameStatus</span> = <span class="hljs-title class_">GameStatus</span>.<span class="hljs-property">Game_Playing</span> <span class="hljs-comment">// 进入游行进行中状态</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameOver</span>.<span class="hljs-property">node</span>.<span class="hljs-property">active</span> = <span class="hljs-literal">false</span><br>    <span class="hljs-comment">// 初始化各种状态</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>    <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">getPosition</span>()<br>    pos.<span class="hljs-property">x</span> = <span class="hljs-number">170</span> + <span class="hljs-number">200</span> * i<br>    <span class="hljs-keyword">var</span> minY = -<span class="hljs-number">170</span><br>    <span class="hljs-keyword">var</span> maxY = <span class="hljs-number">170</span><br>    pos.<span class="hljs-property">y</span> = minY + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (maxY - minY)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">setPosition</span>(pos)<br>    &#125;<br>    <span class="hljs-keyword">var</span> bird = <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">getChildByName</span>(<span class="hljs-string">&quot;Bird&quot;</span>)<br>    bird.<span class="hljs-title function_">setPosition</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vec3</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>    bird.<span class="hljs-title function_">setRotation</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Quat</span>())<br>&#125;<br></code></pre></td></tr></table></figure><p>gameOver函数增加GameOver节点展示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">gameOver</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">gameStatus</span> = <span class="hljs-title class_">GameStatus</span>.<span class="hljs-property">Game_Over</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameOver</span>.<span class="hljs-property">node</span>.<span class="hljs-property">active</span> = <span class="hljs-literal">true</span><br>    <span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;游戏结束&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>最后在相应的函数增加状态判断，只有Game_Playing状态时小鸟才往前飞，才能进行点击。到这里就能开始游戏啦，至于积分部分我就不写了，可以自行加一下哈哈~</p><h3 id="八、最终完整代码"><a href="#八、最终完整代码" class="headerlink" title="八、最终完整代码"></a>八、最终完整代码</h3><p>MainController.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; _decorator, <span class="hljs-title class_">BoxCollider2D</span>, <span class="hljs-title class_">Button</span>, <span class="hljs-title class_">Collider2D</span>, <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">Director</span>, director, <span class="hljs-title class_">EventTouch</span>, instantiate, <span class="hljs-title class_">Label</span>, log, <span class="hljs-title class_">Node</span>, <span class="hljs-title class_">Prefab</span>, <span class="hljs-title class_">Quat</span>, <span class="hljs-title class_">Sprite</span>, <span class="hljs-title class_">Vec3</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cc&#x27;</span>;<br><span class="hljs-keyword">const</span> &#123; ccclass, property &#125; = _decorator;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">GameStatus</span>&#123;<br>    <span class="hljs-title class_">Game</span>_Ready = <span class="hljs-number">0</span>,<br>    <span class="hljs-title class_">Game</span>_Playing,<br>    <span class="hljs-title class_">Game</span>_Over,<br>&#125;<br><br><span class="hljs-meta">@ccclass</span>(<span class="hljs-string">&#x27;MainController&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>    <span class="hljs-meta">@property</span>(<span class="hljs-title class_">Sprite</span>)<br>    <span class="hljs-title class_">SpBg</span>: <span class="hljs-title class_">Sprite</span>[] = [<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>];<br><br>    <span class="hljs-meta">@property</span>(<span class="hljs-title class_">Prefab</span>)<br>    <span class="hljs-attr">pipePrefab</span>: <span class="hljs-title class_">Prefab</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-attr">pipe</span>: <span class="hljs-title class_">Node</span>[] = [<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>];<br><br>    <span class="hljs-attr">gameStatus</span>: <span class="hljs-title class_">GameStatus</span> = <span class="hljs-title class_">GameStatus</span>.<span class="hljs-property">Game_Ready</span>;<br>    <span class="hljs-attr">spGameOver</span>: <span class="hljs-title class_">Sprite</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-attr">spGameStart</span>: <span class="hljs-title class_">Sprite</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">onLoad</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-comment">// 开启点击监听</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameOver</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">getChildByName</span>(<span class="hljs-string">&quot;GameOver&quot;</span>).<span class="hljs-title function_">getComponent</span>(<span class="hljs-title class_">Sprite</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameOver</span>.<span class="hljs-property">node</span>.<span class="hljs-property">active</span> = <span class="hljs-literal">false</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameStart</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">getChildByName</span>(<span class="hljs-string">&quot;GameStart&quot;</span>).<span class="hljs-title function_">getComponent</span>(<span class="hljs-title class_">Sprite</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameStart</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(<span class="hljs-title class_">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_END</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">touchStartBtn</span>, <span class="hljs-variable language_">this</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameOver</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(<span class="hljs-title class_">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_END</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">touchStartBtn</span>, <span class="hljs-variable language_">this</span>)<br>    &#125;<br><br>    <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i] = <span class="hljs-title function_">instantiate</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">pipePrefab</span>) <span class="hljs-comment">// 实例化水管预制体</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">getChildByName</span>(<span class="hljs-string">&quot;Pipe&quot;</span>).<span class="hljs-title function_">addChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i]) <span class="hljs-comment">// 找到Pipe节点，在Pipe节点下生成水管，便于控制层级</span><br><br>            <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">getPosition</span>()<br>            pos.<span class="hljs-property">x</span> = <span class="hljs-number">170</span> + <span class="hljs-number">200</span>*i <span class="hljs-comment">// x坐标为水管间隔距离</span><br>            <span class="hljs-keyword">var</span> minY = -<span class="hljs-number">170</span><br>            <span class="hljs-keyword">var</span> maxY = <span class="hljs-number">170</span><br>            pos.<span class="hljs-property">y</span> = minY + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(maxY-minY) <span class="hljs-comment">// 水管上下高度随机在范围内变化</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">setPosition</span>(pos) <br>        &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">update</span>(<span class="hljs-params">deltaTime: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">gameStatus</span> != <span class="hljs-title class_">GameStatus</span>.<span class="hljs-property">Game_Playing</span>)<span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 背景图向后移动处理</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">SpBg</span>[i].<span class="hljs-property">node</span>.<span class="hljs-title function_">getPosition</span>();<br>            pos.<span class="hljs-property">x</span> -= <span class="hljs-number">1.0</span>;<br>            <span class="hljs-keyword">if</span> (pos.<span class="hljs-property">x</span> &lt;= -<span class="hljs-number">288</span>) &#123;<br>                pos.<span class="hljs-property">x</span> = <span class="hljs-number">288</span>;<br>            &#125;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">SpBg</span>[i].<span class="hljs-property">node</span>.<span class="hljs-title function_">setPosition</span>(pos)<br>        &#125;<br>        <span class="hljs-comment">// 水管向后移动并生成新水管</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>            <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">getPosition</span>()<br>            pos.<span class="hljs-property">x</span> -= <span class="hljs-number">1.0</span> <span class="hljs-comment">// 向后移动处理</span><br>            <span class="hljs-keyword">if</span>(pos.<span class="hljs-property">x</span> &lt;= -<span class="hljs-number">170</span>)&#123; <span class="hljs-comment">// 移出画面后变为新的水管</span><br>                pos.<span class="hljs-property">x</span> = <span class="hljs-number">430</span><br>                <span class="hljs-keyword">var</span> minY = -<span class="hljs-number">170</span><br>                <span class="hljs-keyword">var</span> maxY = <span class="hljs-number">170</span><br>                pos.<span class="hljs-property">y</span> = minY + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(maxY - minY)<br>            &#125;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">setPosition</span>(pos)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">gameOver</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">gameStatus</span> = <span class="hljs-title class_">GameStatus</span>.<span class="hljs-property">Game_Over</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameOver</span>.<span class="hljs-property">node</span>.<span class="hljs-property">active</span> = <span class="hljs-literal">true</span><br>        <span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;游戏结束&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-title function_">touchStartBtn</span>(<span class="hljs-params">event: EventTouch</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameStart</span>.<span class="hljs-property">node</span>.<span class="hljs-property">active</span> = <span class="hljs-literal">false</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">gameStatus</span> = <span class="hljs-title class_">GameStatus</span>.<span class="hljs-property">Game_Playing</span> <span class="hljs-comment">// 进入游行进行中状态</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">spGameOver</span>.<span class="hljs-property">node</span>.<span class="hljs-property">active</span> = <span class="hljs-literal">false</span><br>        <span class="hljs-comment">// 初始化各种状态</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>            <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">getPosition</span>()<br>            pos.<span class="hljs-property">x</span> = <span class="hljs-number">170</span> + <span class="hljs-number">200</span> * i<br>            <span class="hljs-keyword">var</span> minY = -<span class="hljs-number">170</span><br>            <span class="hljs-keyword">var</span> maxY = <span class="hljs-number">170</span><br>            pos.<span class="hljs-property">y</span> = minY + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (maxY - minY)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">pipe</span>[i].<span class="hljs-title function_">setPosition</span>(pos)<br>        &#125;<br>        <span class="hljs-keyword">var</span> bird = <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">getChildByName</span>(<span class="hljs-string">&quot;Bird&quot;</span>)<br>        bird.<span class="hljs-title function_">setPosition</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vec3</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>        bird.<span class="hljs-title function_">setRotation</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Quat</span>())<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BirdController.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; _decorator, <span class="hljs-title class_">BoxCollider2D</span>, <span class="hljs-title class_">Collider2D</span>, <span class="hljs-title class_">IPhysics2DContact</span>, <span class="hljs-title class_">Canvas</span>, <span class="hljs-title class_">Collider</span>, <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">EventTouch</span>, log, <span class="hljs-title class_">Node</span>, <span class="hljs-title class_">Quat</span>, <span class="hljs-title class_">Contact2DType</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cc&#x27;</span>;<br><span class="hljs-keyword">const</span> &#123; ccclass, property &#125; = _decorator;<br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MainController</span>,<span class="hljs-title class_">GameStatus</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./MainController&#x27;</span>;<br><br><span class="hljs-meta">@ccclass</span>(<span class="hljs-string">&#x27;BirdController&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BirdController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-meta">@property</span>(<span class="hljs-title class_">Canvas</span>)<br>    <span class="hljs-title class_">Canvas</span>: <span class="hljs-title class_">Canvas</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-attr">speed</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-attr">mainController</span>: <span class="hljs-title class_">MainController</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">onLoad</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-comment">// 监听屏幕点击事件</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">Canvas</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">on</span>(<span class="hljs-title class_">Node</span>.<span class="hljs-property">EventType</span>.<span class="hljs-property">TOUCH_START</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">onTouchStart</span>, <span class="hljs-variable language_">this</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mainController</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">Canvas</span>.<span class="hljs-title function_">getComponent</span>(<span class="hljs-title class_">MainController</span>) <br>    &#125;<br><br>    <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> collider = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getComponent</span>(<span class="hljs-title class_">BoxCollider2D</span>)<br>        <span class="hljs-keyword">if</span> (collider) &#123;<br>            collider.<span class="hljs-title function_">on</span>(<span class="hljs-title class_">Contact2DType</span>.<span class="hljs-property">BEGIN_CONTACT</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">onBeginContact</span>, <span class="hljs-variable language_">this</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">update</span>(<span class="hljs-params">deltaTime: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">mainController</span>.<span class="hljs-property">gameStatus</span> != <span class="hljs-title class_">GameStatus</span>.<span class="hljs-property">Game_Playing</span>)<span class="hljs-keyword">return</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> -= <span class="hljs-number">0.05</span>; <span class="hljs-comment">// 每次速度减少</span><br>        <span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">getPosition</span>();<br>        pos.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>; <span class="hljs-comment">// 效果是每次加速一点点往下冲</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">setPosition</span>(pos);<br>        <span class="hljs-comment">// 小鸟头朝向的角度处理</span><br>        <span class="hljs-keyword">var</span> angle = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> / <span class="hljs-number">2</span>) * <span class="hljs-number">30</span> <br>        <span class="hljs-keyword">if</span> (angle &gt;= <span class="hljs-number">30</span>) &#123;<br>            angle = <span class="hljs-number">30</span>;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>.<span class="hljs-title function_">setRotation</span>(<span class="hljs-title class_">Quat</span>.<span class="hljs-title function_">fromEuler</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Quat</span>(), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, angle));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 点击屏幕时触发</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">onTouchStart</span>(<span class="hljs-params">event: EventTouch</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">mainController</span>.<span class="hljs-property">gameStatus</span> != <span class="hljs-title class_">GameStatus</span>.<span class="hljs-property">Game_Playing</span>)<span class="hljs-keyword">return</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-number">2</span>; <br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 只在两个碰撞体开始接触时被调用一次</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> selfCollider 指的是回调脚本的节点上的碰撞体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> otherCollider 指的是发生碰撞的另一个碰撞体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> contact 碰撞主要的信息, 位置和法向量, 带有刚体的本地坐标来， </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">onBeginContact</span>(<span class="hljs-params">selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | <span class="hljs-literal">null</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mainController</span>.<span class="hljs-title function_">gameOver</span>() <span class="hljs-comment">// 调用游戏结束函数</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-number">0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CocosCreator3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="/2024/07/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2024/07/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>今天搭建了一个个人博客，用于总结自己的学习过程，和分享一些心得体会，希望能越来越好~</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
